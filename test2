import org.apache.flink.api.common.state.MapState
import org.apache.flink.api.common.state.MapStateDescriptor
import org.apache.flink.api.common.typeinfo.TypeInformation
import org.apache.flink.api.common.typeinfo.Types
import org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}
import org.apache.flink.util.Collector


o make multiple records from a MapState in Flink where the state contains a nested structure like Map<id, HashMap<deptid, UserDefinedClass>>, you need to iterate through the MapState, and for each id, iterate through the nested HashMap to create multiple records. You can use Scala to do this as follows:

case class UserDefinedClass(name: String, age: Int)

def main(args: Array[String]): Unit = {
  val env = StreamExecutionEnvironment.getExecutionEnvironment

  val mapStateDescriptor = new MapStateDescriptor[String, Map[String, UserDefinedClass]](
    "nestedMapState",
    Types.STRING,
    new TypeInformation[Map[String, UserDefinedClass]] {
      // Implement appropriate methods to describe your nested Map type here
    }
  )

  val mapState: MapState[String, Map[String, UserDefinedClass]] = getRuntimeContext.getMapState(mapStateDescriptor)

  // Create a DataStream of your choice, where the KeyedStream represents the 'id' in the outer Map
  // For this example, let's assume you have a DataStream keyed by 'id'
  val input: DataStream[(String, Map[String, UserDefinedClass])] = ???

  val result: DataStream[UserDefinedClass] = input.flatMap {
    (id: String, nestedMap: Map[String, UserDefinedClass], out: Collector[UserDefinedClass]) =>
      nestedMap.values.foreach { userDefinedClass =>
        out.collect(userDefinedClass)
      }
  }

  result.print()

  env.execute("Extract UserDefinedClass from MapState")
}
